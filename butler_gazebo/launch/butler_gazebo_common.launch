<?xml version="1.0"?> <!-- Based on mobipick -->
<launch>
  <arg name="arm_controller" default="trajectory" doc="Which arm controller to start. Options are trajectory, velocity, position" />

  <!-- Use GUI elements -->
  <arg name="gui"   default="false" />

  <!-- Default position and orientation of butler robot -->
  <arg name="robot_x"   default="0.0" />
  <arg name="robot_y"   default="0.0" />
  <arg name="robot_z"   default="0.1" /> <!-- Small offset to avoid clipping through the floor -->
  <arg name="robot_yaw" default="0.0" />

  <arg name="tf_prefix" default="butler" doc="tf_prefix to be used by gazebo plugins and in the robot's urdf etc." />
  <arg name="prefix" value="$(arg tf_prefix)/" if="$(eval tf_prefix != '')" /> <!-- $(arg prefix) is used in all the config files! TODO: For multiple robots, create groups when loading the parameters to overwrite the arg? -->
  <arg name="prefix" value=""                  unless="$(eval tf_prefix != '')" />
  
  <!-- Name of the robot, in our case "butler" -->
  <arg name="robot_name" default="butler" doc="Name of the Gazebo robot model (needs to be different for each robot)" />

  <!-- Load URDF -->
  <include file="$(find butler_description)/launch/upload_butler_description.launch">
    <arg name="tf_prefix" value="$(arg tf_prefix)" />
    <arg unless="$(eval arm_controller=='position')" name="transmission_hw_interface" value="hardware_interface/VelocityJointInterface" />
    <arg if="$(eval arm_controller=='position')"     name="transmission_hw_interface" value="hardware_interface/PositionJointInterface" />
  </include>
  
  <!-- Spawn butler robot into Gazebo -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model $(arg robot_name)
    -J $(arg prefix)ur5_shoulder_pan_joint -3.14
    -J $(arg prefix)ur5_shoulder_lift_joint -1.0
    -J $(arg prefix)ur5_elbow_joint 1.66
    -J $(arg prefix)ur5_wrist_1_joint -2.05
    -J $(arg prefix)ur5_wrist_2_joint -1.48
    -J $(arg prefix)ur5_wrist_3_joint 3.14
    -x $(arg robot_x) -y $(arg robot_y) -z $(arg robot_z) -Y $(arg robot_yaw)" respawn="false" output="screen" />

  <!-- Load gazebo controller configurations -->
  <!-- Note: You MUST load these PID parameters for all joints that are using
       the PositionJointInterface, otherwise the arm + gripper will act like a
       giant parachute, counteracting gravity, and causing some of the wheels
       to lose contact with the ground, so the robot won't be able to properly
       navigate. See
       https://github.com/ros-simulation/gazebo_ros_pkgs/issues/612 -->
  <rosparam file="$(find butler_gazebo)/config/robotiq_2f_85/gazebo_controller.yaml" command="load" subst_value="true" />
  <!-- <rosparam file="$(find butler_gazebo)/config/robotiq_2f_85/gazebo_mimic_joint.yaml" command="load" subst_value="true" /> -->

  <!-- Load ros_control controller configurations -->
  <!-- MIR 100 -->
  <rosparam file="$(find mir_description)/config/diffdrive_controller.yaml" command="load" subst_value="true" />
  <!-- UR5 -->
  <rosparam file="$(find butler_description)/config/joint_state_controller.yaml" command="load" subst_value="true" />
  <rosparam file="$(find butler_description)/config/ur5/arm_controller_ur5.yaml" command="load" subst_value="true" />
  <rosparam file="$(find butler_description)/config/ur5/arm_velocity_controller.yaml" command="load" subst_value="true" />
  <rosparam file="$(find butler_description)/config/ur5/arm_position_controller.yaml" command="load" subst_value="true" />
  <!-- Gripper -->
  <rosparam file="$(find butler_description)/config/robotiq_2f_85/joint_trajectory_controller.yaml" command="load" subst_value="true" />

  <!-- Start the controllers -->
  <node name="controller_spawner" pkg="controller_manager" type="controller_manager" output="screen"
        args="spawn joint_state_controller mobile_base_controller gripper_controller" />

  <group if="$(eval arm_controller=='trajectory')">
    <node name="arm_controller_spawner"          pkg="controller_manager" type="controller_manager" output="screen" args="spawn arm_controller"/>
    <node name="arm_velocity_controller_spawner" pkg="controller_manager" type="controller_manager" output="screen" args="load arm_velocity_controller"/>
  </group>
  <group if="$(eval arm_controller=='velocity')">
    <node name="arm_controller_spawner"          pkg="controller_manager" type="controller_manager" output="screen" args="load arm_controller"/>
    <node name="arm_velocity_controller_spawner" pkg="controller_manager" type="controller_manager" output="screen" args="spawn arm_velocity_controller"/>
  </group>
  <group if="$(eval arm_controller=='position')">
    <node name="arm_position_controller_spawner" pkg="controller_manager" type="controller_manager" output="screen" args="spawn arm_position_controller"/>
  </group>

  <!-- List of used controllers -->
  <!-- <arg name="controllers" default="joint_state_controller arm_controller mobile_base_controller" doc="Controllers that are activated by default."/> -->
  <!-- <arg name="stopped_controllers" default="joint_group_eff_controller" doc="Controllers that are initally loaded, but not started."/> -->

  <!-- Load and start the controllers listed in the 'controllers' arg. -->
  <!-- <node name="ros_control_controller_spawner" pkg="controller_manager" type="spawner" args="$(arg controllers)" output="screen" respawn="false" /> -->

  <!-- EKF -->
  <include file="$(find mir_gazebo)/launch/includes/ekf.launch.xml">
      <arg name="tf_prefix" value="$(arg prefix)" />
  </include>

  <!-- Robot state publisher -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen" />
  
  <!-- Load ros_control controller configurations -->
  <!-- UR5 -->
  <!-- <arg name="controller_config_file" default="$(find butler_description)/config/ur5/arm_controller.yaml" doc="Config file used for defining the ROS-Control controllers."/> -->
  <!-- <rosparam file="$(arg controller_config_file)" command="load" subst_value="true"/> -->
  <!-- MIR 100 -->
  <!-- <rosparam file="$(find mir_description)/config/joint_state_controller.yaml" command="load"/> -->
  <!-- <rosparam file="$(find mir_description)/config/diffdrive_controller.yaml" command="load" subst_value="true"/> -->
  
   
  <!-- Load teleop for MIR 100 -->
  <node name="rqt_robot_steering" pkg="rqt_robot_steering" type="rqt_robot_steering">
    <param name="default_topic" value="cmd_vel"/>
    <param name="default_vx_max" value="1.0" />
    <param name="default_vx_min" value="-1.0" />
    <param name="default_vw_max" value="1.5" />
    <param name="default_vw_min" value="-1.5" />
  </node>

  <!-- Load teleop for UR5 joints -->
  <node name="rqt_joint_trajectory_controller" pkg="rqt_joint_trajectory_controller" type="rqt_joint_trajectory_controller">
    <param name="controller_manager_ns" value="$(arg prefix)controller_manager" />
  </node>

</launch>